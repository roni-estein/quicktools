<?php

namespace DummyNamespace;

use App\User;
use App\Thing;
use Carbon\Carbon;
use Tests\DomainTestCase;
use Illuminate\Foundation\Testing\TestResponse;

// RESOURCE TEST

class DummyClass extends DomainTestCase
{
    const TEST_ROUTE = 'example.show';

    ////////////////////// SUPPLIED DATA TESTS //////////////////////

    /** @test */
    public function example_page_component_has_no_data_in_things_prop()
    {
        $response = $this->getRouteNoExceptions();
        $response->assertPageComponentContains('things', []);
    }

    /** @test */
    public function example_page_component_contains_current_things()
    {
        $response = $this->getRoute();
        $response->assertPageComponentContains('things', Things::current());
    }

    ////////////////////// AXIOS TESTS //////////////////////
    
    /** @test */
    public function an_axios_get_request_to_change_the_date_gets_new_things()
    {
        $things = create(Thing::class, ['user_id' => auth()->id(), 'date' => Carbon::today()], 3);
        $updatedThings = create(Slot::class, ['user_id' => auth()->id(), 'date' => Carbon::tomorrow()], 3);
        $this->getRoute()
            ->assertPageComponentContains('initialThings', $things->sortBy('criteria'))
            ->assertPageComponentDoesNotContain('initialThings', $updatedThings->sortBy('criteria'));
    
        
        
        $apiData = $this->get(route('an.api.route',
            ['date'=> Carbon::tomorrow()])
        );

        $apiData->original->assertEquals($updatedThings->sortBy('criteria'));
    }

    ////////////////////// CONDITIONAL DATA TESTS //////////////////////





    ////////////////////// DATA ORDER TESTS //////////////////////





    ////////////////////// GENERAL TEST HELPERS //////////////////////

    public function setUp(): void
    {
        parent::setUp();

        // Require authenticated user for the following tests
        $this->user = $this->basicSignIn(User::first());
    }
    
    protected function getRoute($attributes = []): TestResponse
    {
        return $this
            ->withExceptionHandling()
            ->get(route(self::TEST_ROUTE, $this->routeVariables()), $this->getValidFields($attributes));
    }
    
    protected function getRouteTest($attributes = []): TestResponse
    {
        ddf($this->getValidFields($attributes));

        return $this
            ->withExceptionHandling()
            ->get(route(self::TEST_ROUTE, $this->routeVariables()), $this->getValidFields($attributes));
    }

    protected function getRouteNoExceptions($attributes = []): TestResponse
    {
        return $this
            ->get(route(self::TEST_ROUTE, $this->routeVariables()), $this->getValidFields($attributes));
    }
    
    protected function getValidFields($attributes = []): array
    {
        $baseArray = [];
        
        return array_merge(
            $baseArray,
            // $otherPossibleFieldSource, // or Example::getOptions(),
            $attributes
        );
    }
    protected function routeVariables(): array
    {
        return [];
     //   return [
     //       'game' => $this->game->id,
     //   ];
    }

    ////////////////////// PRIVATE HELPERS //////////////////////

    //    protected function addCompletedTurns($n = 1)
    //    {
    //        create(Turn::class, [
    //            'game_id' => $this->game->id,
    //            'player_in_control_id' => $this->game->players->random(),
    //            'complete' => true,
    //        ],$n);
    //    }
}