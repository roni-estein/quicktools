<?php

namespace DummyNamespace;

use App\User;
use Tests\DomainTestCase;
use Illuminate\Foundation\Testing\TestResponse;

// STORAGE TEST

class DummyClass extends DomainTestCase
{
    const TEST_ROUTE = 'example.store';

    ////////////////////// CONTROL TESTS //////////////////////

    /** @test */
    public function a_example_can_be_saved()
    {
        $this->submitNoExceptions()
            ->assertCreated();

        $this->assertDatabaseHas('examples', $this->checkParameters());
    }

    /** @test */
    public function a_example_appears_on_index_after_creation()
    {
        $this->followingRedirects()
        ->submitNoExceptions()
        ->assertOk()
        ->assertViewIs('example.index')
        ->assertSee(Example::last()->example_text);
    }

    ////////////////////// INVALID TESTS //////////////////////

    /** @test */
    public function a_field_is_required()
    {
        $this->submit(['field' => null])
            ->assertSessionHasErrors('field');
    }

    ////////////////////// FEATURE TESTS //////////////////////



    ////////////////////// GENERAL TEST HELPERS //////////////////////

    public function setUp(): void
    {
        parent::setUp();
        $this->basicSignIn($this->user = User::first());
    }

    protected function submitNoExceptions($attributes = []): TestResponse
    {
        return $this
            ->post(route(self::TEST_ROUTE, $this->routeParameters()), $this->submitParameters($attributes));
    }

    protected function submit($attributes = []): TestResponse
    {
        return $this
            ->withExceptionHandling()
            ->post(route(self::TEST_ROUTE, $this->routeParameters()), $this->submitParameters($attributes));
    }

    protected function checkParameters($overwrite = [])
    {
        $filteredKeys = [
            'attempt_id' => $this->attempt->id,
            'correct_answer' => true,
        ];

        return array_intersect_key($overwrite + $filteredKeys, $filteredKeys);
    }

    protected function submitParameters($attributes = []): array
    {
        // Maybe fields that get saved to a session
        // or are used on the form but never get saved

        $baseArray = [
        // 'correct_answer' => null,
        ];

        return array_merge(
            $this->checkParameters(),
            $baseArray,
            // $otherPossibleFieldSource, // or Example::getOptions(),
            $attributes
        );
    }

    protected function routeParameters(): array
    {
        return [];
        // return [
        //     'example' => $this->example->id,
        // ];
    }

    ////////////////////// PRIVATE HELPERS //////////////////////

    //    protected function addCompletedTurns($n = 1)
    //    {
    //        create(Turn::class, [
    //            'game_id' => $this->game->id,
    //            'player_in_control_id' => $this->game->players->random(),
    //            'complete' => true,
    //        ],$n);
    //    }
}