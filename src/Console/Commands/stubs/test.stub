<?php

namespace DummyNamespace;

use App\User;
use Carbon\Carbon;
use Tests\DomainTestCase;
use Illuminate\Foundation\Testing\TestResponse;

class DummyClass extends DomainTestCase
{
    const TEST_ROUTE = 'example.store';

    ////////////////////// CONTROL TESTS //////////////////////


    /** @test */
    public function a_example_can_be_saved()
    {
        $this->submitFields()
            ->assertSessionHasNoErrors()
            ->assertCreated();

        $this->assertDatabaseHas('examples', $this->getValidFields());
    }


    ////////////////////// INVALID TESTS //////////////////////

    /** @test */
    public function a_field_is_required()
    {
        $this->submitFields(['field' => null])
            ->assertSessionHasErrors('field');
    }

    ////////////////////// FEATURE TESTS //////////////////////



    ////////////////////// TEST HELPERS //////////////////////

    public function setUp(): void
    {
        parent::setUp();
        $this->user = $this->basicSignIn(User::first());
    }

    protected function submitFieldsNoExceptions($attributes = []): TestResponse
    {
        return $this
            ->post(route(self::TEST_ROUTE, []), $this->getValidFields($attributes));
    }

    protected function submitFields($attributes = []): TestResponse
    {
        return $this
            ->withExceptionHandling()
            ->post(route(self::TEST_ROUTE, []), $this->getValidFields($attributes));
    }

    protected function getValidFields($attributes = []): array
    {
        $baseArray = [
            'example_field' => true,
            'another_example' => '123 Fake St',
        ];

        return array_merge(
            $baseArray,
            // $otherPossibleFieldSource, // or Example::getOptions(),
            $attributes
        );
    }
}